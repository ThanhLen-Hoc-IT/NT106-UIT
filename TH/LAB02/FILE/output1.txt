KHOA MẠNG MÁY TÍNH VÀ TRUYỀN THÔNG - UIT
2
FILE VÀ I/O STREAM
TRONG C#
FILE AND STREAM I/O IN C#
THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: NGUYỄN XUÂN HÀ
LƯU HÀNH NỘI BỘ
A. TỔNG QUAN
1. MỤC TIÊU
LABKHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
2
• CUNG CẤP KHẢ NĂNG KHỞI TẠO, ĐỌC, VIẾT VÀ KHẢ NĂNG CẬP NHẬT FILE.
• HIỂU ĐƯỢC LUỒNG THÔNG TIN (STREAM) TRONG C#.
• CÓ THỂ SỬ DỤNG ĐƯỢC CÁC LỚP FILESTREAM, LỚP STREAMREADER, LỚP STREAMWRITER VÀ
LỚP BINARYFORMATTER ĐỂ ĐỌC VÀ VIẾT CÁC ĐỐI TƯỢNG VÀO TRONG CÁC FILE.
2. MÔI TRƯỜNG
- IDE MICROSOFT VISUAL STUDIO 2010 TRỞ LÊN.
3. LIÊN QUAN
- SINH VIÊN CẦN NẮM ĐƯỢC CÁC KIẾN THỨC NỀN TẢNG VỀ LẬP TRÌNH. CÁC KIẾN THỨC NÀY ĐÃ
ĐƯỢC GIỚI THIỆU TRONG CÁC MÔN HỌC TRƯỚC VÀ TRONG NỘI DUNG LÝ THUYẾT ĐÃ HỌC DO ĐÓ SẼ
KHÔNG ĐƯỢC TRÌNH BÀY LẠI TRONG NỘI DUNG THỰC HÀNH NÀY.
- THAM KHẢO TÀI LIỆU (MỤC E) ĐỂ CÓ KIẾN THỨC CƠ BẢN VỀ C#, WINFORMS.
B. KIẾN THỨC NỀN TẢNG
1. LUỒNG (STREAM) VÀ TẬP TIN (FILE) TRONG C#
LUỒNG (STREAM) LÀ LUỒNG CỦA THÔNG TIN, CHỨA THÔNG TIN SẼ ĐƯỢC CHUYỂN QUA, CÒN TẬP TIN
(FILE) THÌ ĐỂ LƯU TRỮ THÔNG TIN, DỮ LIỆU. FILE VÀ STREAM I/O (INPUT/OUTPUT) ĐỀ CẬP ĐẾN
VIỆC TRUYỀN DỮ LIỆU ĐẾN HOẶC TỪ MỘT PHƯƠNG TIỆN LƯU TRỮ. TRONG .NET FRAMEWORK,
NAMESPACE SYSTEM.IO BAO GỒM CÁC LOẠI CÓ KHẢ NĂNG ĐỌC VÀ GHI (ĐỒNG BỘ VÀ KHÔNG ĐỒNG
BỘ) ĐỐI VỚI CÁC LUỒNG DỮ LIỆU VÀ FILE. NHỮNG NAMESPACE NÀY CŨNG CHỨA CÁC LOẠI NAMESPACE
THỰC HIỆN VIỆC NÉN VÀ GIẢI NÉN CÁC FILE.
DỮ LIỆU ĐƯỢC TRUYỀN THEO HAI HƯỚNG:
• ĐỌC DỮ LIỆU: ĐỌC DỮ LIỆU TỪ BÊN NGOÀI VÀO CHƯƠNG TRÌNH.KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
3
• GHI DỮ LIỆU: ĐƯA DỮ LIỆU TỪ CHƯƠNG TRÌNH RA BÊN NGOÀI.
STREAMS
LỚP STREAM HỖ TRỢ ĐỌC VÀ GHI BYTE. TẤT CẢ CÁC LỚP ĐẠI DIỆN CHO CÁC LUỒNG ĐỀU KẾ THỪA TỪ
LỚP STREAM. LỚP STREAM VÀ CÁC LỚP DẪN XUẤT CỦA NÓ CUNG CẤP MỘT CÁI NHÌN CHUNG VỀ CÁC
NGUỒN DỮ LIỆU VÀ GIÚP LẬP TRÌNH VIÊN KHÔNG CẦN PHẢI ĐI QUÁ CHI TIẾT VỀ CÁC ĐẶC ĐIỂM CỦA
HỆ ĐIỀU HÀNH VÀ CÁC THIẾT BỊ BÊN DƯỚI.
STREAMS BAO HÀM BA THAO TÁC CƠ BẢN:
- ĐỌC: ĐƯA DỮ LIỆU TỪ MỘT LUỒNG VÀO MỘT CẤU TRÚC DỮ LIỆU, CHẲNG HẠN NHƯ MỘT MẢNG
BYTE.
- GHI: ĐƯA DỮ LIỆU VÀO MỘT LUỒNG TỪ MỘT NGUỒN DỮ LIỆU.
- TÌM KIẾM: TRUY VẤN VÀ SỬA ĐỔI VỊ TRỊ HIỆN TẠI TRONG MỘT LUỒNG.
DƯỚI ĐÂY LÀ MỘT SỐ CÁC LỚP STREAM THƯỜNG ĐƯỢC SỬ DỤNG:
- FILESTREAM (SYSTEM.IO.FILESTREAM) – ĐỂ ĐỌC VÀ GHI MỘT FILE.
- NETWORKSTREAM (SYSTEM.NET.SOCKETS.NETWORKSTREAM) – ĐỂ ĐỌC VÀ GHI THÔNG QUA
CÁC SOCKET MẠNG.
FILE VÀ THƯ MỤC
CHÚNG TA CÓ THỂ SỬ DỤNG CÁC LOẠI DƯỚI ĐÂY CÓ TRONG NAMESPACE SYSTEM.IO ĐỂ TƯƠNG TÁC
VỚI FILE VÀ THƯ MỤC.
SYSTEM.IO.FILE – CUNG CẤP CÁC PHƯƠNG THỨC TĨNH CHO VIỆC TẠO, SAO CHÉP, XÓA, DI CHUYỂN VÀ
MỞ FILE, CŨNG NHƯ GIÚP KHỞI TẠO MỘT ĐỐI TƯỢNG FILESTREAM.
SYSTEM.IO.FILEINFO – CUNG CẤP CÁC PHƯƠNG THỨC INSTANCE ĐỂ TẠO, SAO CHÉP, XÓA, DI CHUYỂN
VÀ MỞ FILE CŨNG NHƯ GIÚP KHỞI TẠO MỘT ĐỐI TƯỢNG FILESTREAM.
SYSTEM.IO.DIRECTORY – CUNG CẤP CÁC PHƯƠNG THỨC TĨNH ĐỂ TẠO, DI CHUYỂN VÀ LIỆT KÊ THƯ
MỤC VÀ THƯ MỤC CON.
SYSTEM.IO.DIRECTORYINFO – CUNG CẤP CÁC PHƯƠNG THỨC INSTANCE ĐỂ TẠO, DI CHUYỂN VÀ LIỆT
KÊ THƯ MỤC VÀ THƯ MỤC CON.
SYSTEM.IO.DIRECTORY – CUNG CẤP CÁC PHƯƠNG THỨC VÀ THUỘC TÍNH ĐỂ XỬ LÝ CHUỖI THƯ MỤC
THEO CÁCH ĐA NỀN TẢNG.KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
4
2. CÁC CLASS LIÊN QUAN
A) FILESTREAM:
LÀ MỘT LỚP DẪN XUẤT TỪ STREAM, ĐƯỢC SỬ DỤNG ĐỌC VÀ VIẾT DỮ LIỆU VÀO MỘT FILE HAY ĐỌC VÀ
VIẾT DỮ LIỆU TỪ 1 FILE.
VÍ DỤ:
FILESTREAM FS = NEW FILESTREAM(FILENAME, MODE);
TRONG ĐÓ:
• FILENAME: TẬP TIN MÀ CHÚNG TA MUỐN TRUY XUẤT ĐẾN.
• MODE: CHẾ ĐỘ MỞ FILE NHƯ THẾ NÀO (APPEND, CREATE, CREATENEW, OPEN,
OPENORCREATE…).
VÍ DỤ:
FILESTREAM FS = NEW FILESTREAM(“THUCHANH.TXT”, FILEMODE.CREATENEW);
B) STREAMREADER VÀ STREAMWRITTER
LÀ CÁC LỚP DẪN XUẤT TỪ STREAM, LÀ LUỒNG ĐỌC TẬP TIN. ĐỂ ĐỌC FILE TA DÙNG LỚP STREAMREADER.
ĐỂ GHI FILE TA DÙNG LỚP STREAMWRITER. ĐÂY LÀ LỚP ĐƯỢC DÙNG ĐỂ VIẾT VÀ GHI 1 TẬP TIN DẠNG
VĂN BẢN.
STREAMREADER SR = NEW STREAMREADER(FILESTREAM FILENAME);
STREAMWRITER SW = NEW STREAMREADER(FILESTREAM FILENAME);
VÍ DỤ:
STREAMREADER SR = NEW STREAMREADER(FS);
C) BINARYSTREAM:
NẾU CHÚNG TA SỬ DỤNG MỘT TẬP TIN VĂN BẢN, THÌ KHI CHÚNG TA LƯU DỮ LIỆU KIỂU SỐ THÌ PHẢI
THỰC HIỆN VIỆC CHUYỂN ĐỔI SANG DẠNG CHUỖI KÝ TỰ ĐỂ LƯU VÀO TRONG TẬP TIN VĂN BẢN VÀ KHI
LẤY RA TA CŨNG LẤY ĐƯỢC GIÁ TRỊ CHUỖI KÝ TỰ DO ĐÓ TA PHẢI CHUYỂN SANG DẠNG SỐ. ĐÔI KHI
CHÚNG TA MUỐN CÓ CÁCH THỨC NÀO ĐÓ TỐT HƠN ĐỂ LƯU TRỰC TIẾP GIÁ TRỊ VÀO TRONG TẬP TIN VÀ
SAU ĐÓ ĐỌC TRỰC TIẾP GIÁ TRỊ RA TỪ TẬP TIN.KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
5
VÍ DỤ: KHI VIẾT MỘT SỐ LƯỢNG LỚN CÁC SỐ INTEGER VÀO TRONG TẬP TIN NHƯ LÀ NHỮNG SỐ NGUYÊN,
THÌ KHI ĐÓ TA CÓ THỂ ĐỌC CÁC GIÁ TRỊ NÀY RA NHƯ LÀ SỐ INTEGER. TRƯỜNG HỢP NẾU CHÚNG ĐƯỢC
VIẾT VÀO TẬP TIN VỚI DẠNG VĂN BẢN, THÌ KHI ĐỌC RA TA PHẢI ĐỌC RA VĂN BẢN VÀ PHẢI CHUYỂN
MỖI GIÁ TRỊ TỪ MỘT CHUỖI ĐẾN CÁC SỐ INTEGER. TỐT HƠN VIỆC PHẢI THỰC HIỆN THÊM CÁC BƯỚC
CHUYỂN ĐỔI, TA CÓ THỂ GẮN MỘT KIỂU LUỒNG NHỊ PHÂN BINARYSTREAM VÀO TRONG MỘT TẬP TIN,
RỒI SAU ĐÓ ĐỌC VÀ GHI THÔNG TIN NHỊ PHÂN TỪ LUỒNG NÀY.
GHI CHÚ: THÔNG TIN NHỊ PHÂN LÀ THÔNG TIN ĐÃ ĐƯỢC ĐỊNH DẠNG KIỂU LƯU TRỮ DỮ LIỆU.
VÍ DỤ:
FILESTREAM FS = NEW FILESTREAM(SFD.FILENAME,FILEMODE.CREATENEW);
BINARYWRITER BW = NEW BINARYWRITER(FS);
D) BINARYFORMATTER:
SỬ DỤNG 2 PHƯƠNG THỨC SERIALIZE VÀ DESERIALIZE ĐỂ VIẾT VÀ ĐỌC ĐỐI TƯỢNG TỪ TRONG LUỒNG:
• SERIALIZE: CHUYỂN ĐỔI MỘT ĐỐI TƯỢNG SANG MỘT ĐỊNH DẠNG, VÀ CÓ THỂ ĐƯỢC VIẾT VÀO FILE
MÀ KHÔNG MẤT DỮ LIỆU.
• DESERIALIZE: ĐỌC DỮ LIỆU ĐÃ ĐỊNH DẠNG TỪ MỘT FILE VÀ CHUYỂN NÓ VỀ DẠNG BAN ĐẦU
VÍ DỤ:
SERIALIZE
BINARYFORMATTER BINARYFORMATTER = NEW BINARYFORMATTER();
FILESTREAM FILENAME = FILE.CREATE("..\\STUDENT.TXT");
BINARYFORMATTER.SERIALIZE(FILENAME, ST);
DESERIALIZE
BINARYFORMATTER BF = NEW BINARYFORMATTER();
FILESTREAM FS = FILE.OPENREAD("..\\STUDENT.TXT");
STUDENT STUDENT = (STUDENT)BF.DESERIALIZE(FS);KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
6
LƯU Ý: ĐỐI VỚI CÁC PHIÊN BẢN MỚI NHẤT, BINARYFORMATTER ĐÃ BỊ OBSOLETE VÌ CÁC MỐI
NGUY HIỂM TỚI VẤN ĐỀ AN TOÀN. DO ĐÓ, CÁC BẠN CÓ THỂ THAY THẾ BẰNG JSONSERIALIZER VỚI VÍ
DỤ DƯỚI ĐÂY.
USING SYSTEM;
USING SYSTEM.COLLECTIONS.GENERIC;
USING SYSTEM.IO;
USING SYSTEM.TEXT.JSON;
// DEFINE A CLASS TO BE SERIALIZED/DESERIALIZED
CLASS PERSON
{
PUBLIC STRING NAME { GET; SET; }
PUBLIC INT AGE { GET; SET; }
PUBLIC PERSON(STRING NAME, INT AGE)
{
NAME = NAME;
AGE = AGE;
}
PUBLIC OVERRIDE STRING TOSTRING()
{
RETURN $"NAME: {NAME}, AGE: {AGE}";
}
}
CLASS PROGRAM
{
STATIC VOID MAIN(STRING[] ARGS)
{
// CREATE SOME SAMPLE DATA
LIST<PERSON> PEOPLE = NEW LIST<PERSON>
{
NEW PERSON("ALICE", 30),
NEW PERSON("BOB", 25),
NEW PERSON("CHARLIE", 40)
};
// SERIALIZE THE DATA TO A FILE USING JSON SERIALIZATION
SERIALIZETOFILEJSON("PEOPLE.JSON", PEOPLE);
// DESERIALIZE THE DATA FROM THE FILE USING JSON SERIALIZATION
LIST<PERSON> DESERIALIZEDPEOPLEJSON =
DESERIALIZEFROMFILEJSON<LIST<PERSON>>("PEOPLE.JSON");
// DISPLAY THE DESERIALIZED DATA
CONSOLE.WRITELINE("DESERIALIZED DATA USING JSON SERIALIZATION:");
FOREACH (VAR PERSON IN DESERIALIZEDPEOPLEJSON)
{
CONSOLE.WRITELINE(PERSON);
}
// SERIALIZE THE DATA TO A FILE USING STREAMWRITER
SERIALIZETOFILESTREAM("PEOPLE.TXT", PEOPLE);KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
7
// DESERIALIZE THE DATA FROM THE FILE USING STREAMREADER
LIST<PERSON> DESERIALIZEDPEOPLESTREAM =
DESERIALIZEFROMFILESTREAM("PEOPLE.TXT");
// DISPLAY THE DESERIALIZED DATA
CONSOLE.WRITELINE("\NDESERIALIZED DATA USING STREAMREADER AND
STREAMWRITER:");
FOREACH (VAR PERSON IN DESERIALIZEDPEOPLESTREAM)
{
CONSOLE.WRITELINE(PERSON);
}
}
// SERIALIZE AN OBJECT TO A FILE USING JSON SERIALIZATION
STATIC VOID SERIALIZETOFILEJSON<T>(STRING FILEPATH, T OBJ)
{
TRY
{
// SERIALIZE THE OBJECT TO JSON FORMAT
STRING JSON = JSONSERIALIZER.SERIALIZE(OBJ);
// WRITE THE JSON DATA TO THE FILE
FILE.WRITEALLTEXT(FILEPATH, JSON);
CONSOLE.WRITELINE($"SERIALIZED DATA SUCCESSFULLY WRITTEN TO
{FILEPATH}");
}
CATCH (EXCEPTION EX)
{
CONSOLE.WRITELINE($"ERROR OCCURRED WHILE SERIALIZING DATA:
{EX.MESSAGE}");
}
}
// DESERIALIZE AN OBJECT FROM A FILE USING JSON DESERIALIZATION
STATIC T DESERIALIZEFROMFILEJSON<T>(STRING FILEPATH)
{
TRY
{
// READ THE JSON DATA FROM THE FILE
STRING JSON = FILE.READALLTEXT(FILEPATH);
// DESERIALIZE THE JSON DATA TO THE SPECIFIED TYPE
RETURN JSONSERIALIZER.DESERIALIZE<T>(JSON);
}
CATCH (EXCEPTION EX)
{
CONSOLE.WRITELINE($"ERROR OCCURRED WHILE DESERIALIZING DATA:
{EX.MESSAGE}");
RETURN DEFAULT;
}
}
// SERIALIZE AN OBJECT TO A FILE USING STREAMWRITER
STATIC VOID SERIALIZETOFILESTREAM(STRING FILEPATH, LIST<PERSON> PEOPLE)
{KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
8
TRY
{
// CREATE A NEW STREAMWRITER AND FILESTREAM
USING (STREAMWRITER WRITER = NEW STREAMWRITER(FILEPATH))
{
// WRITE EACH PERSON TO THE FILE
FOREACH (VAR PERSON IN PEOPLE)
{
WRITER.WRITELINE($"{PERSON.NAME},{PERSON.AGE}");
}
}
CONSOLE.WRITELINE($"SERIALIZED DATA SUCCESSFULLY WRITTEN TO
{FILEPATH}");
}
CATCH (EXCEPTION EX)
{
CONSOLE.WRITELINE($"ERROR OCCURRED WHILE SERIALIZING DATA:
{EX.MESSAGE}");
}
}
// DESERIALIZE AN OBJECT FROM A FILE USING STREAMREADER
STATIC LIST<PERSON> DESERIALIZEFROMFILESTREAM(STRING FILEPATH)
{
LIST<PERSON> PEOPLE = NEW LIST<PERSON>();
TRY
{
// CREATE A NEW STREAMREADER AND FILESTREAM
USING (STREAMREADER READER = NEW STREAMREADER(FILEPATH))
{
STRING LINE;
// READ EACH LINE FROM THE FILE AND CREATE A PERSON OBJECT
WHILE ((LINE = READER.READLINE()) != NULL)
{
STRING[] PARTS = LINE.SPLIT(',');
IF (PARTS.LENGTH == 2)
{
STRING NAME = PARTS[0];
INT AGE = INT.PARSE(PARTS[1]);
PEOPLE.ADD(NEW PERSON(NAME, AGE));
}
}
}
}
CATCH (EXCEPTION EX)
{
CONSOLE.WRITELINE($"ERROR OCCURRED WHILE DESERIALIZING DATA:
{EX.MESSAGE}");
}
RETURN PEOPLE;
}
}KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
9
C. VÍ DỤ MINH HỌA
1. CHƯƠNG TRÌNH ĐẾM SỐ DÒNG TRONG FILE
KHI NHẤN VÀO BUTTON BTNREAD SẼ ĐẾM VÀ THÔNG BÁO SỐ DÒNG CÓ TRONG MỘT TẬP TIN BẤT KỲ.
GIAO DIỆN MINH HỌA.
GỢI Ý: BẮT SỰ KIỆN CHO NÚT BTNREAD, SỬ DỤNG LỚP STREAMREADER.
PRIVATE VOID BTNREAD_CLICK(OBJECT SENDER, SYSTEM.EVENTARGS E)
{
OPENFILEDIALOG OFD = NEW OPENFILEDIALOG();
OFD.SHOWDIALOG();
FILESTREAM FS = NEW FILESTREAM(OFD.FILENAME, FILEMODE.OPENORCREATE);
STREAMREADER SR = NEW STREAMREADER(FS);
INT LINECOUNT = 0;
WHILE (SR.READLINE() != NULL)
{
LINECOUNT++;
}
FS.CLOSE();
MESSAGEBOX.SHOW("THERE ARE " + LINECOUNT + " LINES IN " + OFD.FILENAME);
}
2. CHƯƠNG TRÌNH GHI FILE NHỊ PHÂN
CHƯƠNG TRÌNH GHI THÀNH FILE NHỊ PHÂN VỚI NỘI DUNG
BẤT KỲ.
HÌNH MINH HỌA
GỢI Ý: BẮT SỰ KIỆN CHO NÚT BTNWRITE, SỬ DỤNG BINARYWRITER
PRIVATE VOID BTNWRITE_CLICK(OBJECT SENDER, EVENTARGS E)
{
SAVEFILEDIALOG SFD = NEW SAVEFILEDIALOG();
SFD.SHOWDIALOG();
FILESTREAM FS = NEW FILESTREAM(SFD.FILENAME, FILEMODE.CREATENEW);
BINARYWRITER BW = NEW BINARYWRITER(FS);
INT[] MYARRAY = NEW INT[1000];KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
10
FOR (INT I = 0; I < 1000; I++)
{
MYARRAY[I] = I;
BW.WRITE(MYARRAY[I]);
}
BW.CLOSE();
}KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
11
D. BÀI TẬP
CÁC BÀI THỰC HÀNH YÊU CẦU VIẾT CHƯƠNG TRÌNH DƯỚI DẠNG WINDOWS FORMS APP.
SINH VIÊN CÓ THỂ TÙY BIẾN CÁCH SẮP XẾP GIAO DIỆN KHÁC SAO CHO HỢP LÝ.
TẤT CẢ CÁC BÀI THỰC HÀNH ĐẶT CHUNG TRONG 1 PROJECT DUY NHẤT.
1. BÀI 01 – GHI VÀ ĐỌC FILE
VIẾT CHƯƠNG TRÌNH ĐỌC NỘI DUNG MỘT FILE “INPUT1.TXT” VÀ XUẤT RA MÀN HÌNH. SAU ĐÓ GHI NỘI
DUNG (CHUYỂN TOÀN BỘ KÝ TỰ SANG KIỂU IN HOA) XUỐNG FILE “OUTPUT1.TXT”.
GIAO DIỆN MINH HỌA:
GỢI Ý:
- SỬ DỤNG HÀM READTOEND ĐỂ ĐỌC TOÀN BỘ DỮ LIỆU VÀ ĐẨY DỮ LIỆU VÀO RICHTEXTBOX.
- SỬ DỤNG STREAMWRITTER ĐỂ GHI NỘI DUNG XUỐNG FILE.
2. BÀI 02 – ĐỌC THÔNG TIN MỘT FILE .TXT
VIẾT CHƯƠNG TRÌNH ĐỌC FILE VÀ HIỂN THỊ CÁC THÔNG TIN SAU:
- TÊN FILE
- KÍCH THƯỚC FILE
- ĐƯỜNG DẪN URL
- SỐ DÒNG, SỐ TỪ, SỐ KÝ TỰ
- HIỂN THỊ NỘI DUNG CỦA FILE
GIAO DIỆN MINH HỌA.KHOA MẠNG MÁY TÍNH
VÀ TRUYỀN THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
12
GỢI Ý: BẮT SỰ KIỆN CLICK CHO NÚT ĐỌC FILE, SỬ DỤNG LỚP STREAMREADER
- CÓ THỂ SỬ DỤNG .SAFEFILENAME PROPERTY CỦA OPENFILEDIALOG ĐỂ LẤY TÊN FILE
VD: NAME = OFD.SAFEFILENAME.TOSTRING();
- CÓ THỂ SỬ DỤNG .NAME PROPERTY CỦA FILESTREAM ĐỂ LẤY ĐƯỜNG DẪN
VD: URL = FS.NAME.TOSTRING();
3. BÀI 03 - ĐỌC VÀ GHI FILE VÀ TÍNH TOÁN
ĐỌC NỘI DUNG TỪ FILE “INPUT3.TXT” VỚI NỘI DUNG THEO ĐỊNH DẠNG, SAU ĐÓ THỰC HIỆN CÁC
PHÉP TÍNH VÀ GHI KẾT QUẢ XUỐNG FILE “OUTPUT3.TXT”. CÁC PHÉP TÍNH BAO GỒM: CỘNG TRỪ,
NHÂN, CHIA, NGOẶC ĐƠN. LƯU Ý: KHÔNG SỬ DỤNG PHƯƠNG THỨC DATATABLE.COMPUTE.
VÍ DỤ : NỘI DUNG FILE “INPUT3.TXT” :
1 + 2 + 3 + 4
12 – 7 – 5 + 2 – 3
2024 – 1 – 2 + 3
222 + 333 – 444 + 1
NỘI DUNG FILE “OUTPUT3.TXT” :
1 + 2 + 3 + 4 = 10
12 – 7 – 5 + 2 – 3 = –1
2024 – 1 – 2 + 3 = 2024
222 + 333 – 444.2 + 1 = 111.8
4. BÀI 4 - ĐỌC VÀ GHI FILE SỬ DỤNG BINARYFORMATTER (JSONSERIALIZER)
VIẾT CHƯƠNG TRÌNH SỬ DỤNG BINARYFORMATTER CHO PHÉP : NHẬP 1 MẢNG CÁC SINH VIÊN
(KHÔNG NHẬP ĐIỂM TRUNG BÌNH) VÀ GHI XUỐNG FILE “INPUT4.TXT”. CẤU TRÚC CỦA SINH VIÊN
NHƯ SAU :KHOA MMT&TT - UIT
• HỌ VÀ TÊN : STRING
• MSSV : INT
• ĐIỆN THOẠI : STRING
• ĐIỂM MÔN 1 : FLOAT
• ĐIỂM MÔN 2 : FLOAT
• ĐIỂM MÔN 3 : FLOAT
• ĐIỂM TRUNG BÌNH : FLOAT
ĐỌC THÔNG TIN MẢNG HỌC VIÊN TỪ FILE “INPUT4.TXT” VÀ TÍNH ĐIỂM TRUNG BÌNH CHO TỪNG SINH
VIÊN SAU ĐÓ GHI XUỐNG FILE “OUTPUT4.TXT” VÀ XUẤT RA MÀN HÌNH.
LƯU Ý: KHI XUẤT RA MÀN HÌNH, CẦN TÍNH ĐIỂM TRUNG BÌNH CỦA 3 MÔN HỌC. RÀNG BUỘC ĐIỀU
KIỆN SỐ ĐIỆN THOẠI PHẢI CÓ 10 CHỮ SỐ VÀ BẮT ĐẦU BỞI SỐ 0. MÃ SỐ SINH VIÊN LÀ MỘT SỐ CÓ 8
CHỮ SỐ. CÁC ĐIỂM CỦA TỪNG HỌC PHẦN TỪ 0 ĐẾN 10. CÓ CHỨC NĂNG HIỂN THỊ SỐ TRANG HIỆN TẠI
VÀ CÓ THỂ ĐIỀU CHỈNH ĐỂ XEM LẦN LƯỢT DANH SÁCH SINH VIÊN.
5. BÀI 05 – QUẢN LÝ PHÒNG VÉ (PHIÊN BẢN SỐ 2)
LẤY Ý TƯỞNG TỪ BÀI 4 - BÀI THỰC HÀNH SỐ 1, TUY NHIÊN CÁC THÔNG TIN CỦA PHÒNG VÉ SẼ ĐƯỢC
NHẬP BẰNG FILE “INPUT5.TXT” VỚI CẤU TRÚC:
<TÊN PHIM>
<GIÁ VÉ CHUẨN>KHOA MẠNG MÁY TÍNH VÀ TRUYỀN
THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
14
<PHÒNG CHIẾU>
...
VIẾT CHƯƠNG TRÌNH CHO PHÉP NHẬP VÀ GHI THÀNH FILE, ĐỌC FILE ĐỂ LẤY CÁC THÔNG TIN CẦN THIẾT.
CÁC YÊU CẦU TƯƠNG TỰ, BỔ SUNG TÍNH NĂNG XUẤT NỘI DUNG THỐNG KÊ THEO PHIM “OUTPUT5.TXT”
BAO GỒM: TÊN PHIM, SỐ LƯỢNG VÉ BÁN RA, SỐ LƯỢNG VÉ TỒN, TỈ LỆ VÉ BÁN RA, DOANH THU, XẾP
HẠNG DOANH THU PHÒNG VÉ. TRONG ĐÓ, DOANH THU LÀ TỔNG SỐ TIỀN THU ĐƯỢC KHI BÁN VÉ CỦA
PHIM ĐÓ, XẾP HẠNG DOANH THU PHÒNG VÉ LÀ XẾP HẠNG PHIM CÓ DOANH THU THEO THỨ TỰ TỪ
CAO ĐẾN THẤP.
LƯU Ý: TÌM HIỂU PROGRESSBAR VÀ THÊM VÀO KHI XUẤT FILE “OUTPUT5.TXT” ĐỂ HỖ TRỢ NGƯỜI
DÙNG DỄ THEO DÕI TÌNH TRẠNG ỨNG DỤNG.
6. BÀI 06 – HÔM NAY ĂN GÌ? (PHIÊN BẢN SỐ 2)
LẤY Ý TƯỞNG TỪ BÀI 8 - BÀI THỰC HÀNH SỐ 1, TUY NHIÊN CÁCH THỨC NHẬP, ĐỌC THÔNG TIN VỀ MÓN
ĂN ĐƯỢC CẤU TRÚC Ở DẠNG NHƯ SAU:
MONAN (IDMA, TENMONAN, HINHANH, IDNCC)
NGUOIDUNG (IDNCC, HOVATEN, QUYENHAN)
TÌM HIỂU VỀ CÁC SỬ DỤNG SQLITE, THỰC HIỆN NHẬP DỮ LIỆU TRÊN VÀO CƠ SỞ DỮ LIỆU SQLITE,
THỰC HIỆN CÁC CÂU TRUY VẤN ĐỂ TRÍCH XUẤT THÔNG TIN. CHƯƠNG TRÌNH CHO PHÉP HIỂN THỊ DANH
SÁCH CÁC MÓN ĂN HIỆN TẠI ĐƯỢC ĐỌC TỪ CƠ SỞ DỮ LIỆU (SỬ DỤNG LISTVIEW HAY TREEVIEW...).
KẾT QUẢ CUỐI CÙNG CỦA ỨNG DỤNG LÀ NGẪU NHIÊN CHỌN RA 1 MÓN ĂN, HÌNH ẢNH CỦA MÓN ĂN
ĐÓ VÀ TÊN NGƯỜI ĐÓNG GÓP MÓN ĂN.
GỢI Ý: XEM CÁC HƯỚNG DẪN [4] VÀ [5] TRƯỚC
7. BÀI 07 – DUYỆT THƯ MỤC
VIẾT ỨNG DỤNG CHO PHÉP DUYỆT TẤT CẢ FILE CÓ TRONG MÁY TÍNH, HIỂN THỊ DANH SÁCH CÁI FILE,
THƯ MỤC. CHO PHÉP ĐI ĐẾN FOLDER TIẾP THEO KHI NHẤP ĐÚP CHUỘT VÀ HIỂN THỊ NỘI DUNG CỦA
FILE KHI BẤM CHỌN.
GIAO DIỆN MINH HỌAKHOA MẠNG MÁY TÍNH VÀ TRUYỀN
THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
15KHOA MẠNG MÁY TÍNH VÀ TRUYỀN
THÔNG
TÀI LIỆU THỰC HÀNH LẬP TRÌNH MẠNG CĂN BẢN
GVHD: PHAN TRUNG PHÁT - PHATPT@UIT.EDU.VN
LAB 2: FILE VÀ I/O STREAM TRONG C#
16
E. YÊU CẦU & NỘP BÀI
1. YÊU CẦU
▪ CÁC GIAO DIỆN Ở TRÊN CHỈ MẠNG TÍNH CHẤT MINH HỌA, SINH VIÊN TIẾN HÀNH THIẾT KẾ GIAO
CỦA RIÊNG MÌNH ĐẢM BẢO CÁC TIÊU CHÍ: DỄ NHÌN, THỂ HIỆN HẾT ĐƯỢC CÁC YÊU CẦU CẦN
THỰC HIỆN, ĐẸP.
▪ CODE “SẠCH” [2], ĐẶT TÊN BIẾN RÕ RÀNG.
▪ NỘP BÀI KHÔNG ĐẦY ĐỦ; LỖI, KHÔNG CHẠY ĐƯỢC; NỘP TRỄ; SAO CHÉP CODE BẠN KHÁC,
NGUỒN CÓ SẴN: XỬ LÝ TÙY THEO MỨC ĐỘ.
2. NỘP BÀI
▪ SINH VIÊN THỰC HÀNH VÀ NỘP BÀI CÁ NHÂN TẠI WEBSITE MÔN HỌC THEO THỜI GIAN QUY
ĐỊNH.
▪ SOURCE CODE ĐƯỢC NỘP TẠI GITHUB VÀ BÁO ĐƯỢC NỘP DƯỚI ĐỊNH DẠNG:
TOÀN BỘ CÁC FILE LIÊN QUAN ĐẶT VÀO 1 FILE NÉN (.ZIP) VỚI TÊN THEO QUY TẮC SAU:
MÃ LỚP-LABX-MSSV
VÍ DỤ: NT106.M21.MMCL.1-LAB02-25520001
F. THAM KHẢO
[1] MICROSOFT (2018). C# GUIDE. [ONLINE] AVAILABLE AT: HTTPS://DOCS.MICROSOFT.COM/ENUS/DOTNET/CSHARP/
[2] MARTIN, R. C. (2009). CLEAN CODE: A HANDBOOK OF AGILE SOFTWARE CRAFTSMANSHIP. PEARSON
EDUCATION.
[3] LẬP TRÌNH WINFORM CƠ BẢN [ONLINE] AVAILABLE AT: LẬP TRÌNH WINFORM CƠ BẢN | HOW
KTEAM
[4] SETUP SQLITE SETUP SQLITE DATABASE IN VISUAL STUDIO (14/23) (YOUTUBE.COM)
[5] SỬ DỤNG SQLITE TRONG WINFORM SQLITE DATABASE IN C# WINDOWS FORM (YOUTUBE.COM)
HẾT
